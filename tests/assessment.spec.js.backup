// @ts-check
const { test, expect } = require('@playwright/test');
const { LoginPage } = require('../pages/LoginPage');
const { NAVPackReportPage } = require('../pages/NAVPackReportPage');
const { TrialBalancePage } = require('../pages/TrialBalancePage');
const { testData } = require('../config/test-data');

// Increase test timeout to 240 seconds (4 minutes)
test.setTimeout(240000);

/**
 * ASSIGNMENT REQUIREMENTS:
 * ========================
 * Write automation test cases for Live Reports:
 * Focus: NAV Pack Report
 * 
 * Test Result/Coverage:
 * - Define own test coverage
 * - Validate data in the reports
 */

// Test Suite 1: Login Functionality (Runs independently)
// test.describe('Login Functionality Tests', () => {
  
//   test('verify if user can login with valid credentials', async ({ page }) => {
//     const loginPage = new LoginPage(page);

//     await loginPage.goto();
//     await loginPage.fillUsername(testData.login.username);
//     await loginPage.fillPassword(testData.login.password);
//     await loginPage.clickLogin();

//     await page.waitForTimeout(3000);

//     const currentUrl = page.url();
//     expect(currentUrl).toContain('alchelyst.com');
//   });
// });

// Test Suite 2: NAV Pack Report Tests
test.describe('NAV Pack Report Tests', () => {
  
  let loginPage;
  let navPackReport;

  test.beforeEach(async ({ page }) => {
    loginPage = new LoginPage(page);
    navPackReport = new NAVPackReportPage(page);
    
    // Navigate to the site first
    await page.goto('https://aurum-test.alchelyst.com');
    // Smart wait - wait for page to load completely
    await page.waitForLoadState('networkidle', { timeout: 10000 });
    
    // Check if already logged in by looking for dashboard elements
    const isLoggedIn = await page.locator('text=Report Centre').isVisible({ timeout: 10000 }).catch(() => false);
    
    if (!isLoggedIn) {
      console.log('üîê Logging in...');
      try {
        // Wait for login page to load completely
        await page.waitForLoadState('networkidle', { timeout: 30000 });
        console.log('‚úÖ Page loaded, looking for username field...');
        
        // Use the working locator directly
        console.log('‚úÖ Username field found, proceeding with login...');
        
      await loginPage.login(testData.login.username, testData.login.password);
        // Smart wait - wait for dashboard to load after login
        await page.waitForLoadState('networkidle', { timeout: 10000 });
        
        // Verify login was successful
        await page.locator('text=Report Centre').waitFor({ state: 'visible', timeout: 30000 });
        console.log('‚úÖ Login successful');
      } catch (error) {
        console.log('‚ö†Ô∏è Login failed, but continuing with test...');
        console.log('Error:', error.message);
        console.log('Current URL:', page.url());
      }
    } else {
      console.log('‚úÖ Already logged in, skipping login');
    }
  });

  // Navigation Tests
  test('verify if the report button is clickable', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);

    await expect(navPackReport.arrowButton).toBeVisible({ timeout: 10000 });
    await expect(navPackReport.arrowButton).toBeEnabled();
    await navPackReport.arrowButton.click();
    
    await page.waitForTimeout(3000);
  });
  
  test('verify if the Live Reports tab is clickable', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    await navPackReport.arrowButton.click();
    await page.waitForTimeout(3000);

    await expect(navPackReport.liveReportsTab).toBeVisible({ timeout: 10000 });
    await navPackReport.liveReportsTab.click();
    
    await page.waitForTimeout(3000);
  });
  
  test('verify if the Accounting section is expandable', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    await navPackReport.arrowButton.click();
    await page.waitForTimeout(3000);
    
    await navPackReport.liveReportsTab.click();
    await page.waitForTimeout(3000);

    await expect(navPackReport.accountingSection).toBeVisible({ timeout: 10000 });
    await navPackReport.accountingSection.click();
    
    await page.waitForTimeout(2000);
  });

  // NAV Pack Report Tests
  test('verify NAV Pack Report with data validation', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);

    // Navigate to NAV Pack Report
    await navPackReport.navigateToReport();

    // Verify report is accessible
    await navPackReport.verifyReportTitleVisible();
    await navPackReport.verifyReportTitleText();

    // Verify all fields are visible
    await navPackReport.verifyAllFieldsVisible();

    // Verify View Report button
    await navPackReport.verifyViewReportButton();

    // Verify report data loaded
    await navPackReport.verifyReportDataLoaded();

    // Verify URL
    await navPackReport.verifyURL();

    // Take screenshot
    await navPackReport.takeScreenshot('nav-pack-report.png');

    // Pause to view
    await page.waitForTimeout(5000);
  });

  // Complete Flow Test
  test('verify complete navigation flow to NAV Pack Report', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);

    // Navigate to NAV Pack Report
    await navPackReport.navigateToReport();

    // Verify report is accessible
    await navPackReport.verifyReportTitleVisible();
    await navPackReport.verifyReportTitleText();

    // Verify report data loaded
    await navPackReport.verifyReportDataLoaded();

    // Verify URL
    await navPackReport.verifyURL();

    // Take screenshot
    await navPackReport.takeScreenshot('complete-flow.png');

    await page.waitForTimeout(5000);
  });

  // Refresh Test
  test
    ('verify refresh does not break NAV Pack Report page', async ({ page }) => {
      const navPackReport = new NAVPackReportPage(page);

      // Navigate to NAV Pack Report
      await navPackReport.navigateToReport();

      // Verify report is loaded before refresh
      await navPackReport.verifyReportTitleVisible();

      // Take screenshot before refresh
      await page.screenshot({ path: 'screenshots/before-refresh.png' });

      // Pause to view page before refresh
      console.log('‚è∏Ô∏è Pausing for 5 seconds - View the page before refresh...');
      await page.waitForTimeout(5000);

      console.log('üîÑ Refreshing page now...');

      // Refresh the page
      await navPackReport.refreshPage();

      console.log('‚úÖ Page refreshed! Verifying it is not broken...');

      // Verify page is not broken after refresh
      await navPackReport.verifyPageNotBroken();

      // Take screenshot after refresh
      await page.screenshot({ path: 'screenshots/after-refresh.png' });

      // Pause to view page after refresh
      console.log('‚è∏Ô∏è Pausing for 5 seconds - View the page after refresh...');
      await page.waitForTimeout(5000);
    });

  // Error Handling Test
  test('verify error when View Report clicked without client', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);

    // Navigate to NAV Pack Report
    await navPackReport.navigateToReport();
    
    // Verify we are on NAV Pack Report page
    await navPackReport.verifyReportTitleVisible();
    
    console.log('üìã On NAV Pack Report page - about to click View Report without selecting client...');
    await page.waitForTimeout(3000);
    
    // Click View Report button without selecting client
    await expect(navPackReport.viewReportButton).toBeVisible({ timeout: 10000 });
    
    console.log('üñ±Ô∏è Clicking View Report button without selecting client...');
    await navPackReport.viewReportButton.click();
    await page.waitForTimeout(3000);
    
    console.log('‚è∏Ô∏è Checking for validation or error message...');
    
    // Check for validation or error message
    const validationMessage = page.locator('.mx-validation-message, .alert, [class*="error"]');
    const hasValidation = await validationMessage.count() > 0;
    
    if (hasValidation) {
      console.log('‚úÖ Validation message appeared (as expected)');
    } else {
      console.log('‚ÑπÔ∏è No validation message (button may be disabled or validation is different)');
    }
    
    // Pause to view the result
    await page.waitForTimeout(5000);
  });

  test('scenario 26: verify if user is able to add/select the client', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    
    try {
      console.log('üìã Starting scenario 26: Client selection test...');
    
    await navPackReport.navigateToReport();
    await page.waitForTimeout(5000);
    
    console.log('üìã On NAV Pack Report - Looking for client dropdown...');
    
      // Try multiple locator strategies for the client dropdown
      let dropdown = null;
      const locators = [
        "xpath=//input[contains(@id, 'comboBox3') and @role='combobox']",
        "xpath=//input[contains(@id, 'comboBox') and @role='combobox']",
        "xpath=//input[contains(@placeholder, 'Client') or contains(@placeholder, 'client')]",
        "select, .mx-referenceselector",
        "[role='combobox']"
      ];
      
      for (const locator of locators) {
        try {
          console.log(`üîç Trying locator: ${locator}`);
          dropdown = page.locator(locator).first();
          await dropdown.waitFor({ state: 'visible', timeout: 10000 });
          console.log(`‚úÖ Found dropdown with locator: ${locator}`);
          break;
        } catch (error) {
          console.log(`‚ùå Locator failed: ${locator}`);
          continue;
        }
      }
      
      if (!dropdown) {
        throw new Error('Could not find client dropdown with any locator strategy');
      }
    
    console.log('üñ±Ô∏è Clicking on client dropdown...');
    await dropdown.click();
    await page.waitForTimeout(2000);
    
    console.log('‚å®Ô∏è Typing STEERHEAD...');
    await dropdown.fill('STEERHEAD');
    await page.waitForTimeout(3000);
    
    console.log('‚è∏Ô∏è Pausing 5 seconds - See STEERHEAD in field...');
    await page.waitForTimeout(5000);
    
    console.log('‚èé Pressing Enter to confirm selection...');
    await dropdown.press('Enter');
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ Client STEERHEAD selected - Pausing 5 seconds to view...');
    await page.waitForTimeout(5000);
      
    } catch (error) {
      console.log('‚ùå Scenario 26 failed:', error.message);
      // Take a screenshot for debugging
      await page.screenshot({ path: 'screenshots/scenario-26-error.png' });
      throw error;
    }
  });


  test('scenario 27: verify if user is able to add the fund in the fund field dropdown', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    
    await navPackReport.navigateToReport();
    await page.waitForTimeout(5000);
    
    // First select client STEERHEAD
    console.log('üìã First selecting client STEERHEAD...');
    const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
    await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await clientDropdown.click();
    await page.waitForTimeout(2000);
    await clientDropdown.fill('STEERHEAD');
    await page.waitForTimeout(2000);
    await clientDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Client STEERHEAD selected');
    
    // Now select the fund
    console.log('üìã Looking for fund dropdown...');
    const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
    await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
    
    console.log('üñ±Ô∏è Clicking on fund dropdown...');
    await fundDropdown.click();
    await page.waitForTimeout(2000);
    
    console.log('‚å®Ô∏è Typing Steerhead Alternative Energy Fund...');
    await fundDropdown.fill('Steerhead Alternative Energy Fund');
    await page.waitForTimeout(3000);
    
    console.log('‚è∏Ô∏è Pausing 5 seconds - See fund name in field...');
    await page.waitForTimeout(5000);
    
    console.log('‚èé Pressing Enter to confirm fund selection...');
    await fundDropdown.press('Enter');
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ Fund "Steerhead Alternative Energy Fund" selected - Pausing 5 seconds to view...');
    await page.waitForTimeout(5000);
  });


  test('scenario 30: verify if user is able to add the accountingdate in the datemode field dropdown', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    
    await navPackReport.navigateToReport();
    await page.waitForTimeout(5000);
    
    // First select client STEERHEAD
    console.log('üìã First selecting client STEERHEAD...');
    const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
    await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await clientDropdown.click();
    await page.waitForTimeout(2000);
    await clientDropdown.fill('STEERHEAD');
    await page.waitForTimeout(2000);
    await clientDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Client STEERHEAD selected');
    
    // Select the fund
    console.log('üìã Selecting fund...');
    const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
    await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await fundDropdown.click();
    await page.waitForTimeout(2000);
    await fundDropdown.fill('Steerhead Alternative Energy Fund');
    await page.waitForTimeout(2000);
    await fundDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Fund selected');
    
    // Select Date Mode
    console.log('üìã Selecting Date Mode...');
    const dateModeDropdown = page.getByLabel('Date Mode');
    await dateModeDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await dateModeDropdown.click();
    await page.waitForTimeout(2000);
    await dateModeDropdown.selectOption('AccountingDate');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Date Mode selected');
    
    console.log('‚è∏Ô∏è Pausing 5 seconds - See AccountingDate selected...');
    await page.waitForTimeout(5000);
    
    console.log('‚úÖ AccountingDate selected in Date Mode - Pausing 5 seconds to view...');
    await page.waitForTimeout(5000);
  });

  test('scenario 31: verify if user is able to add the date in  in the diaryend dropdown', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    
    await navPackReport.navigateToReport();
    await page.waitForTimeout(5000);
    
    // First select client STEERHEAD
    console.log('üìã First selecting client STEERHEAD...');
    const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
    await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await clientDropdown.click();
    await page.waitForTimeout(2000);
    await clientDropdown.fill('STEERHEAD');
    await page.waitForTimeout(2000);
    await clientDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Client STEERHEAD selected');
    
    // Select the fund
    console.log('üìã Selecting fund...');
    const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
    await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await fundDropdown.click();
    await page.waitForTimeout(2000);
    await fundDropdown.fill('Steerhead Alternative Energy Fund');
    await page.waitForTimeout(2000);
    await fundDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Fund selected');
    
    // Select Date Mode
    console.log('üìã Selecting Date Mode...');
    const dateModeDropdown = page.getByLabel('Date Mode');
    await dateModeDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await dateModeDropdown.click();
    await page.waitForTimeout(2000);
    await dateModeDropdown.selectOption('AccountingDate');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Date Mode selected');
    
    // Add date in diary start field first
    console.log('üìã Looking for Diary Start field...');
    const diaryStartField = page.locator("xpath=//input[contains(@id, 'comboBox1') and @role='combobox']");
    await diaryStartField.waitFor({ state: 'visible', timeout: 30000 });
    
    console.log('üñ±Ô∏è Clicking on Diary Start field...');
    await diaryStartField.click();
    await page.waitForTimeout(2000);
    
    console.log('‚å®Ô∏è Typing 30APR2025 in Diary Start...');
    await diaryStartField.fill('30MAR2025');
    await page.waitForTimeout(3000);
    
    console.log('‚èé Pressing Enter to confirm Diary Start...');
    await diaryStartField.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Diary Start date entered');
    
    // Now add date in diary end field
    console.log('üìã Looking for Diary End field...');
    const diaryEndField = page.getByRole('combobox', { name: 'Diary End' });
    await diaryEndField.waitFor({ state: 'visible', timeout: 30000 });
    
    console.log('üñ±Ô∏è Clicking on Diary End field...');
    await diaryEndField.click();
    await page.waitForTimeout(2000);
    
    console.log('‚å®Ô∏è Typing 30APR2025 in Diary End...');
    await diaryEndField.fill('30APR2025');
    await page.waitForTimeout(3000);
    
    console.log('‚è∏Ô∏è Pausing 5 seconds - See date in Diary End field...');
    await page.waitForTimeout(5000);
    
    console.log('‚èé Pressing Enter to confirm Diary End...');
    await diaryEndField.press('Enter');
    await page.waitForTimeout(3000);

    console.log('‚úÖ Date 30APR2025 entered in Diary End - Pausing 5 seconds to view...');
    await page.waitForTimeout(5000);
  });

  test('scenario 32: verify if user is able to view the report based on added entry', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);

    await navPackReport.navigateToReport();
  await page.waitForTimeout(5000);

  // Select client STEERHEAD
  console.log('üìã Selecting client STEERHEAD...');
  const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
  await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
  await clientDropdown.click();
  await page.waitForTimeout(2000);
  await clientDropdown.fill('STEERHEAD');
  await page.waitForTimeout(2000);
  await clientDropdown.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Client STEERHEAD selected');
  
  // Select fund
  console.log('üìã Selecting fund...');
  const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
  await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
  await fundDropdown.click();
  await page.waitForTimeout(2000);
  await fundDropdown.fill('Steerhead Alternative Energy Fund');
  await page.waitForTimeout(2000);
  await fundDropdown.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Fund selected');
  
  // Select Date Mode
  console.log('üìã Selecting Date Mode...');
  const dateModeDropdown = page.getByLabel('Date Mode');
  await dateModeDropdown.waitFor({ state: 'visible', timeout: 30000 });
  await dateModeDropdown.click();
  await page.waitForTimeout(2000);
  await dateModeDropdown.selectOption('AccountingDate');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Date Mode selected');
  
  // Add Diary Start date
  console.log('üìã Adding Diary Start date...');
  const diaryStartField = page.locator("xpath=//input[contains(@id, 'comboBox1') and @role='combobox']");
  await diaryStartField.waitFor({ state: 'visible', timeout: 30000 });
  await diaryStartField.click();
  await page.waitForTimeout(2000);
  await diaryStartField.fill('30MAR2025');
  await page.waitForTimeout(3000);
  await diaryStartField.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Diary Start date entered');
  
  // Add Diary End date
  console.log('üìã Adding Diary End date...');
  const diaryEndField = page.getByRole('combobox', { name: 'Diary End' });
  await diaryEndField.waitFor({ state: 'visible', timeout: 30000 });
  await diaryEndField.click();
  await page.waitForTimeout(2000);
  await diaryEndField.fill('30APR2025');
  await page.waitForTimeout(3000);
  await diaryEndField.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Diary End date entered');
  
  // Click View Report button
  console.log('üñ±Ô∏è Clicking View Report button...');
  await navPackReport.viewReportButton.click();
  await page.waitForTimeout(5000);

  // Wait for report to generate (wait for the table to appear)
  console.log('‚è≥ Waiting for report table to load...');
  try {
    // Wait for Trial Balance tab or table data to appear
    const reportTable = page.locator("text=Trial Balance").first();
    await reportTable.waitFor({ state: 'visible', timeout: 180000 }); // 3 minutes
    console.log('‚úÖ Report table loaded successfully!');
  } catch (error) {
    console.log('‚ö†Ô∏è Trying alternate wait - checking for table data...');
    await page.waitForTimeout(10000);
  }

  console.log('‚è∏Ô∏è Pausing 15 seconds to view the report...');
  await page.waitForTimeout(15000);

    console.log('üì∏ Taking screenshot of the report...');
    await page.screenshot({ path: 'screenshots/nav-pack-report-view.png' });
  });

  test('scenario 33: verify if user is able to export the report', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    
    await navPackReport.navigateToReport();
  await page.waitForTimeout(5000);
  
  // Select client STEERHEAD
  console.log('üìã Selecting client STEERHEAD...');
  const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
  await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
  await clientDropdown.click();
  await page.waitForTimeout(2000);
  await clientDropdown.fill('STEERHEAD');
  await page.waitForTimeout(2000);
  await clientDropdown.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Client STEERHEAD selected');
  
  // Select fund
  console.log('üìã Selecting fund...');
  const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
  await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
  await fundDropdown.click();
  await page.waitForTimeout(2000);
  await fundDropdown.fill('Steerhead Alternative Energy Fund');
  await page.waitForTimeout(2000);
  await fundDropdown.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Fund selected');
  
  // Select Date Mode
  console.log('üìã Selecting Date Mode...');
  const dateModeDropdown = page.getByLabel('Date Mode');
  await dateModeDropdown.waitFor({ state: 'visible', timeout: 30000 });
  await dateModeDropdown.click();
  await page.waitForTimeout(2000);
  await dateModeDropdown.selectOption('AccountingDate');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Date Mode selected');
  
  // Add Diary Start date
  console.log('üìã Adding Diary Start date...');
  const diaryStartField = page.locator("xpath=//input[contains(@id, 'comboBox1') and @role='combobox']");
  await diaryStartField.waitFor({ state: 'visible', timeout: 30000 });
  await diaryStartField.click();
  await page.waitForTimeout(2000);
  await diaryStartField.fill('31MAR2025');
  await page.waitForTimeout(3000);
  await diaryStartField.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Diary Start date entered');
  
  // Add Diary End date
  console.log('üìã Adding Diary End date...');
  const diaryEndField = page.getByRole('combobox', { name: 'Diary End' });
  await diaryEndField.waitFor({ state: 'visible', timeout: 30000 });
  await diaryEndField.click();
  await page.waitForTimeout(2000);
  await diaryEndField.fill('30APR2025');
  await page.waitForTimeout(3000);
  await diaryEndField.press('Enter');
  await page.waitForTimeout(3000);
  console.log('‚úÖ Diary End date entered');
  
  // Click View Report button
  console.log('üñ±Ô∏è Clicking View Report button...');
  await navPackReport.viewReportButton.click();
  await page.waitForTimeout(5000);
  
  // Wait for report to generate (wait for the table to appear)
  console.log('‚è≥ Waiting for report table to load...');
  try {
    const reportTable = page.locator("text=Trial Balance").first();
    await reportTable.waitFor({ state: 'visible', timeout: 180000 }); // 3 minutes
    console.log('‚úÖ Report table loaded successfully!');
  } catch (error) {
    console.log('‚ö†Ô∏è Trying alternate wait - checking for table data...');
    await page.waitForTimeout(10000);
  }
  
  console.log('‚è∏Ô∏è Pausing 5 seconds before clicking Export...');
  await page.waitForTimeout(5000);
  
  // Click Export button (wait for it to be enabled)
  console.log('üñ±Ô∏è Clicking Export button...');
  const exportButton = page.locator("//button[normalize-space()='Export']");
  await exportButton.waitFor({ state: 'visible', timeout: 60000 });
  
  // Wait for download to start
  const downloadPromise = page.waitForEvent('download');
  await exportButton.click();
  const download = await downloadPromise;
  
  // Save the downloaded file
  const downloadPath = './downloads/' + download.suggestedFilename();
  await download.saveAs(downloadPath);
  console.log(`‚úÖ Export downloaded to: ${downloadPath}`);
  
  await page.waitForTimeout(3000);
  
    console.log('‚úÖ Export button clicked successfully!');
    console.log('‚è∏Ô∏è Pausing 10 seconds to view export action...');
    await page.waitForTimeout(10000);
  });

  test('scenario 34: validate data in the NAV Pack Report', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    
    await navPackReport.navigateToReport();
    await page.waitForTimeout(5000);
    
    // Select client STEERHEAD
    console.log('üìã Selecting client STEERHEAD...');
    const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
    await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await clientDropdown.click();
    await page.waitForTimeout(2000);
    await clientDropdown.fill('STEERHEAD');
    await page.waitForTimeout(2000);
    await clientDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Client STEERHEAD selected');
    
    // Select fund
    console.log('üìã Selecting fund...');
    const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
    await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await fundDropdown.click();
    await page.waitForTimeout(2000);
    await fundDropdown.fill('Steerhead Alternative Energy Fund');
    await page.waitForTimeout(2000);
    await fundDropdown.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Fund selected');
    
    // Select Date Mode
    console.log('üìã Selecting Date Mode...');
    const dateModeDropdown = page.getByLabel('Date Mode');
    await dateModeDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await dateModeDropdown.click();
    await page.waitForTimeout(2000);
    await dateModeDropdown.selectOption('AccountingDate');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Date Mode selected');
    
    // Add Diary Start date
    console.log('üìã Adding Diary Start date...');
    const diaryStartField = page.locator("xpath=//input[contains(@id, 'comboBox1') and @role='combobox']");
    await diaryStartField.waitFor({ state: 'visible', timeout: 30000 });
    await diaryStartField.click();
    await page.waitForTimeout(2000);
    await diaryStartField.fill('31MAR2025');
    await page.waitForTimeout(3000);
    await diaryStartField.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Diary Start date entered');
    
    // Add Diary End date
    console.log('üìã Adding Diary End date...');
    const diaryEndField = page.getByRole('combobox', { name: 'Diary End' });
    await diaryEndField.waitFor({ state: 'visible', timeout: 30000 });
    await diaryEndField.click();
    await page.waitForTimeout(2000);
    await diaryEndField.fill('30APR2025');
    await page.waitForTimeout(3000);
    await diaryEndField.press('Enter');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Diary End date entered');
    
    // Click View Report button
    console.log('üñ±Ô∏è Clicking View Report button...');
    await navPackReport.viewReportButton.click();
    await page.waitForTimeout(5000);
    
    // Wait for report to generate
    console.log('‚è≥ Waiting for report table to load...');
    const reportTable = page.locator("text=Trial Balance").first();
    await reportTable.waitFor({ state: 'visible', timeout: 180000 });
    console.log('‚úÖ Report table loaded successfully!');
    
    await page.waitForTimeout(5000);
    
    // Click Export button and download the file
    console.log('üñ±Ô∏è Clicking Export button to download report...');
    const exportButton = page.locator("//button[normalize-space()='Export']");
    await exportButton.waitFor({ state: 'visible', timeout: 60000 });
    
    const downloadPromise = page.waitForEvent('download');
    await exportButton.click();
    const download = await downloadPromise;
    
    const downloadPath = './downloads/' + download.suggestedFilename();
    await download.saveAs(downloadPath);
    console.log(`‚úÖ Report exported to: ${downloadPath}`);
    await page.waitForTimeout(3000);
    
    // DATA VALIDATION ON WEB PAGE
    console.log('\nüîç Starting Web Page Data Validation...\n');
    
    // 1. Validate "Portfolio Valuation" tab exists
    console.log('1Ô∏è‚É£ Validating Portfolio Valuation tab...');
    const portfolioValuationTab = page.locator('text=Portfolio Valuation');
    const hasPortfolioValuation = await portfolioValuationTab.count() > 0;
    if (hasPortfolioValuation) {
      await expect(portfolioValuationTab.first()).toBeVisible();
      console.log('‚úÖ "Portfolio Valuation" tab is visible in the report');
    } else {
      console.log('‚ÑπÔ∏è "Portfolio Valuation" tab not found (may be in a different section)');
    }
    
    // 2. Validate data in report
    console.log('\n2Ô∏è‚É£ Validating client data...');
    const steerheadText = page.locator('text=STEERHEAD').first();
    await expect(steerheadText).toBeVisible();
    console.log('‚úÖ Client "STEERHEAD" found in report');
    
    // 3. Validate portfolio data
    console.log('\n3Ô∏è‚É£ Validating portfolio data...');
    const shaef01Text = page.locator('text=SHAEF01').first();
    await expect(shaef01Text).toBeVisible();
    console.log('‚úÖ Portfolio "SHAEF01" found in report');
    
    // 4. Validate numerical data exists
    console.log('\n4Ô∏è‚É£ Validating numerical balance data...');
    const balanceData = page.locator('text=/[0-9,]+\\.[0-9]{2}/').first();
    await expect(balanceData).toBeVisible({ timeout: 10000 });
    const sampleBalance = await balanceData.textContent();
    console.log(`‚úÖ Balance data found: ${sampleBalance}`);
    
    // 5. Take screenshot
    console.log('\n5Ô∏è‚É£ Taking screenshot for evidence...');
    await page.screenshot({ path: 'screenshots/validated-nav-pack-report.png', fullPage: true });
    console.log('‚úÖ Screenshot saved: screenshots/validated-nav-pack-report.png');
    
    console.log('\n‚úÖ ‚úÖ ‚úÖ DATA VALIDATION COMPLETE! ‚úÖ ‚úÖ ‚úÖ\n');
    console.log('üìä Validation Summary:');
    console.log('   ‚úì Report generated and exported successfully');
    console.log('   ‚úì Client data validated (STEERHEAD)');
    console.log('   ‚úì Portfolio data validated (SHAEF01)');
    console.log('   ‚úì Numerical balance data validated');
    console.log('   ‚úì Portfolio Valuation section checked');
    console.log(`   ‚úì Export file saved: ${downloadPath}`);
    
    await page.waitForTimeout(10000);
  });



  test('scenario 37: validate exported Excel file contains correct data', async ({ page }) => {
    const navPackReport = new NAVPackReportPage(page);
    const fs = require('fs');
    
    await navPackReport.navigateToReport();
    await page.waitForTimeout(5000);
    
    // Select client STEERHEAD
    const clientDropdown = page.locator("xpath=//input[contains(@id, 'comboBox3') and @role='combobox']");
    await clientDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await clientDropdown.click();
    await page.waitForTimeout(2000);
    await clientDropdown.fill('STEERHEAD');
    await page.waitForTimeout(2000);
    await clientDropdown.press('Enter');
    await page.waitForTimeout(3000);
    
    // Select fund
    const fundDropdown = page.locator("xpath=//input[contains(@id, 'comboBox4') and @role='combobox']");
    await fundDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await fundDropdown.click();
    await page.waitForTimeout(2000);
    await fundDropdown.fill('Steerhead Alternative Energy Fund');
    await page.waitForTimeout(2000);
    await fundDropdown.press('Enter');
    await page.waitForTimeout(3000);
    
    // Select Date Mode
    const dateModeDropdown = page.getByLabel('Date Mode');
    await dateModeDropdown.waitFor({ state: 'visible', timeout: 30000 });
    await dateModeDropdown.click();
    await page.waitForTimeout(2000);
    await dateModeDropdown.selectOption('AccountingDate');
    await page.waitForTimeout(3000);
    
    // Add Diary Start date
    const diaryStartField = page.locator("xpath=//input[contains(@id, 'comboBox1') and @role='combobox']");
    await diaryStartField.waitFor({ state: 'visible', timeout: 30000 });
    await diaryStartField.click();
    await page.waitForTimeout(2000);
    await diaryStartField.fill('31MAR2025');
    await page.waitForTimeout(3000);
    await diaryStartField.press('Enter');
    await page.waitForTimeout(3000);
    
    // Add Diary End date
    const diaryEndField = page.getByRole('combobox', { name: 'Diary End' });
    await diaryEndField.waitFor({ state: 'visible', timeout: 30000 });
    await diaryEndField.click();
    await page.waitForTimeout(2000);
    await diaryEndField.fill('30APR2025');
    await page.waitForTimeout(3000);
    await diaryEndField.press('Enter');
    await page.waitForTimeout(3000);
    
    // Click View Report
    console.log('üñ±Ô∏è Clicking View Report button...');
    await navPackReport.viewReportButton.click();
    await page.waitForTimeout(5000);
    
    // Wait for report to load
    console.log('‚è≥ Waiting for report...');
    const reportTable = page.locator("text=Trial Balance").first();
    await reportTable.waitFor({ state: 'visible', timeout: 180000 });
    await page.waitForTimeout(5000);
    
    // Click Export and download
    console.log('üñ±Ô∏è Exporting report...');
    const exportButton = page.locator("//button[normalize-space()='Export']");
    await exportButton.waitFor({ state: 'visible', timeout: 60000 });
    
    const downloadPromise = page.waitForEvent('download');
    await exportButton.click();
    const download = await downloadPromise;
    
    const fileName = download.suggestedFilename();
    const downloadPath = './downloads/' + fileName;
    await download.saveAs(downloadPath);
    console.log(`‚úÖ Report exported to: ${downloadPath}`);
    await page.waitForTimeout(3000);
    
    // VALIDATE EXPORTED FILE
    console.log('\nüîç Validating Exported Excel File...\n');
    
    console.log('1Ô∏è‚É£ Checking if file exists...');
    const fileExists = fs.existsSync(downloadPath);
    expect(fileExists).toBe(true);
    console.log(`‚úÖ File exists: ${downloadPath}`);
    
    console.log('\n2Ô∏è‚É£ Checking file size...');
    const stats = fs.statSync(downloadPath);
    const fileSizeKB = (stats.size / 1024).toFixed(2);
    expect(stats.size).toBeGreaterThan(0);
    console.log(`‚úÖ File size: ${fileSizeKB} KB (file is not empty)`);
    
    console.log('\n3Ô∏è‚É£ Checking file extension...');
    const isExcelFile = fileName.endsWith('.xlsx') || fileName.endsWith('.xls');
    expect(isExcelFile).toBe(true);
    console.log(`‚úÖ File is Excel format: ${fileName}`);
    
    console.log('\n‚úÖ Excel file validation complete!');
    console.log('üìä File Summary:');
    console.log(`   ‚úì File: ${fileName}`);
    console.log(`   ‚úì Size: ${fileSizeKB} KB`);
    console.log(`   ‚úì Format: Excel (.xlsx)`);
    console.log(`   ‚úì Path: ${downloadPath}`);
    
    await page.waitForTimeout(5000);
  });

  test('verify if the trial balance section is visible', async ({ page }) => {
    const trialBalancePage = new TrialBalancePage(page);
    
    console.log('üìã Starting test: verify if the trial balance section is visible...');
    
    // Navigate to Trial Balance Report
    console.log('üñ±Ô∏è Navigating to Trial Balance Report...');
    await trialBalancePage.navigateToReport();
    
    console.log('‚úÖ Navigation completed: Reports > Live Reports > Accounting');
    console.log('üìã Ready to add trial balance functionality from here...');
    
    // Take screenshot for documentation
    console.log('üì∏ Taking screenshot...');
    await trialBalancePage.takeScreenshot('accounting-section-expanded.png');
    
    console.log('‚úÖ Navigation test completed successfully!');
    await page.waitForTimeout(5000);
  });

  test('verify if the trial balance section is clickable', async ({ page }) => {

    const trialBalancePage = new TrialBalancePage(page);
    
    console.log('üìã Starting test: verify if the trial balance section is visible...');
    
    // Navigate to Trial Balance Report
    console.log('üñ±Ô∏è Navigating to Trial Balance Report...');
    await trialBalancePage.navigateToReport();
    
    console.log('‚úÖ Navigation completed: Reports > Live Reports > Accounting');
    console.log('üìã Ready to add trial balance functionality from here...');
    
    // Click on Trial Balance link
    console.log('üñ±Ô∏è Clicking on Trial Balance link...');
    const trialBalanceLink = page.locator("//span[normalize-space(text())='Trial Balance']");
    await trialBalanceLink.waitFor({ state: 'visible', timeout: 10000 });
    await trialBalanceLink.click();
    
    // Smart wait for Trial Balance data to load
    console.log('‚è≥ Waiting for Trial Balance data to load...');
    await page.waitForLoadState('networkidle', { timeout: 15000 });
    
    // Wait for page to fully load after click
    await page.waitForTimeout(2000);
    
    // Wait for Trial Balance report title to appear (use first() to avoid strict mode violation)
    console.log('üîç Waiting for Trial Balance report title...');
    const reportTitle = page.locator('h5:has-text("Trial Balance"), .mx-name-text2:has-text("Trial Balance"), [class*="title"]:has-text("Trial Balance")').first();
    await reportTitle.waitFor({ state: 'visible', timeout: 15000 });
    
    // Wait for actual data content (not just empty containers)
    console.log('üîç Waiting for actual data content...');
    const dataContent = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr, [class*="row"]:not(:empty)').first();
    await dataContent.waitFor({ state: 'visible', timeout: 20000 });
    
    // Verify data is actually present (not just empty rows)
    console.log('üîç Verifying data rows are not empty...');
    const dataRows = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr');
    const rowCount = await dataRows.count();
    console.log(`üìä Found ${rowCount} data rows`);
    
    if (rowCount === 0) {
      throw new Error('No data rows found in Trial Balance report');
    }
    
    // Additional wait to ensure data is fully rendered
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ Trial Balance data loaded successfully!');
    
    // Select "Steerhead Alternative Energy Fund" from dropdown
    console.log('üñ±Ô∏è Selecting Steerhead Alternative Energy Fund...');
    const fundDropdown = page.locator("//select[contains(@id,'referenceSelector1')]");
    await fundDropdown.waitFor({ state: 'visible', timeout: 10000 });
    
    // Use selectOption to select the fund
    await fundDropdown.selectOption('Steerhead Alternative Energy Fund');
    
    console.log('‚úÖ Steerhead Alternative Energy Fund selected successfully!');
    
    // Wait for data to update after selection
    console.log('‚è≥ Waiting for data to update after fund selection...');
    await page.waitForLoadState('networkidle', { timeout: 10000 });
    await page.waitForTimeout(3000);
    
    // Take screenshot for documentation
    console.log('üì∏ Taking screenshot...');
    await trialBalancePage.takeScreenshot('trial-balance-with-fund-selected.png');
    
    console.log('‚úÖ Trial Balance test with fund selection completed successfully!');
  });

  test('222verify if the trial balance section is clickable', async ({ page }) => {
  const trialBalancePage = new TrialBalancePage(page);
  
  console.log('üìã Starting test 222: Trial Balance with fund selection...');
  
  // Navigate to Trial Balance Report
  console.log('üñ±Ô∏è Navigating to Trial Balance Report...');
  await trialBalancePage.navigateToReport();
  
  console.log('‚úÖ Navigation completed: Reports > Live Reports > Accounting');
  console.log('üìã Ready to add trial balance functionality from here...');
  
  // Click on Trial Balance link
  console.log('üñ±Ô∏è Clicking on Trial Balance link...');
  const trialBalanceLink = page.locator("//span[normalize-space(text())='Trial Balance']");
  await trialBalanceLink.waitFor({ state: 'visible', timeout: 10000 });
  await trialBalanceLink.click();
  
  // Smart wait for Trial Balance data to load
  console.log('‚è≥ Waiting for Trial Balance data to load...');
  await page.waitForLoadState('networkidle', { timeout: 15000 });
  
  // Wait for page to fully load after click
  await page.waitForTimeout(2000);
  
  // Wait for Trial Balance report title to appear (use first() to avoid strict mode violation)
  console.log('üîç Waiting for Trial Balance report title...');
  const reportTitle = page.locator('h5:has-text("Trial Balance"), .mx-name-text2:has-text("Trial Balance"), [class*="title"]:has-text("Trial Balance")').first();
  await reportTitle.waitFor({ state: 'visible', timeout: 15000 });
  
  // Wait for actual data content (not just empty containers)
  console.log('üîç Waiting for actual data content...');
  const dataContent = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr, [class*="row"]:not(:empty)').first();
  await dataContent.waitFor({ state: 'visible', timeout: 20000 });
  
  // Verify data is actually present (not just empty rows)
  console.log('üîç Verifying data rows are not empty...');
  const dataRows = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr');
  const rowCount = await dataRows.count();
  console.log(`üìä Found ${rowCount} data rows`);
  
  if (rowCount === 0) {
    throw new Error('No data rows found in Trial Balance report');
  }
  
  // Additional wait to ensure data is fully rendered
  await page.waitForTimeout(3000);
  
  console.log('‚úÖ Trial Balance data loaded successfully!');
  
  // Select "Steerhead Alternative Energy Fund" from dropdown
  console.log('üñ±Ô∏è Selecting Steerhead Alternative Energy Fund...');
  const fundDropdown = page.locator("//select[contains(@id,'referenceSelector1')]");
  await fundDropdown.waitFor({ state: 'visible', timeout: 10000 });
  
  // Use selectOption to select the fund
  await fundDropdown.selectOption('Steerhead Alternative Energy Fund');
  
  console.log('‚úÖ Steerhead Alternative Energy Fund selected successfully!');
  
  // Wait for data to update after selection
  console.log('‚è≥ Waiting for data to update after fund selection...');
  await page.waitForLoadState('networkidle', { timeout: 10000 });
  await page.waitForTimeout(3000);
  
  // Take screenshot for documentation
  console.log('üì∏ Taking screenshot...');
  await trialBalancePage.takeScreenshot('trial-balance-with-fund-selected-222.png');
  
  console.log('‚úÖ Test 222: Trial Balance with fund selection completed successfully!');






  });

  test('999verify if the user can view the trial balance by default', async ({ page }) => {
    const trialBalancePage = new TrialBalancePage(page);
    
    console.log('üìã Starting test 999: Trial Balance with View Report functionality...');
    
    // Navigate to Trial Balance Report
    console.log('üñ±Ô∏è Navigating to Trial Balance Report...');
    try {
      await trialBalancePage.navigateToReport();
    } catch (error) {
      console.log('‚ùå Navigation failed:', error.message);
      console.log('üîç Current URL:', page.url());
      console.log('üîç Page title:', await page.title());
      
      // Take screenshot for debugging
      await page.screenshot({ path: 'screenshots/debug-navigation-failed-999.png', fullPage: true });
      throw error;
    }
    
    console.log('‚úÖ Navigation completed: Reports > Live Reports > Accounting');
    console.log('üìã Ready to add trial balance functionality from here...');
    
    // Click on Trial Balance link
    console.log('üñ±Ô∏è Clicking on Trial Balance link...');
    const trialBalanceLink = page.locator("//span[normalize-space(text())='Trial Balance']");
    await trialBalanceLink.waitFor({ state: 'visible', timeout: 10000 });
    await trialBalanceLink.click();
    
    // Smart wait for Trial Balance data to load
    console.log('‚è≥ Waiting for Trial Balance data to load...');
    await page.waitForLoadState('networkidle', { timeout: 15000 });
    
    // Wait for page to fully load after click
    await page.waitForTimeout(2000);
    
    // Wait for Trial Balance report title to appear (use first() to avoid strict mode violation)
    console.log('üîç Waiting for Trial Balance report title...');
    const reportTitle = page.locator('h5:has-text("Trial Balance"), .mx-name-text2:has-text("Trial Balance"), [class*="title"]:has-text("Trial Balance")').first();
    await reportTitle.waitFor({ state: 'visible', timeout: 15000 });
    
    // Wait for actual data content (not just empty containers)
    console.log('üîç Waiting for actual data content...');
    const dataContent = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr, [class*="row"]:not(:empty)').first();
    await dataContent.waitFor({ state: 'visible', timeout: 20000 });
    
    // Verify data is actually present (not just empty rows)
    console.log('üîç Verifying data rows are not empty...');
    const dataRows = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr');
    const rowCount = await dataRows.count();
    console.log(`üìä Found ${rowCount} data rows`);
    
    if (rowCount === 0) {
      throw new Error('No data rows found in Trial Balance report');
    }
    
    // Additional wait to ensure data is fully rendered
    await page.waitForTimeout(3000);
    
    console.log('‚úÖ Trial Balance data loaded successfully!');
    
    // Select "Steerhead Alternative Energy Fund" from dropdown
    console.log('üñ±Ô∏è Selecting Steerhead Alternative Energy Fund...');
    const fundDropdown = page.locator("//select[contains(@id,'referenceSelector1')]");
    await fundDropdown.waitFor({ state: 'visible', timeout: 10000 });
    
    // Use selectOption to select the fund
    await fundDropdown.selectOption('Steerhead Alternative Energy Fund');
    
    console.log('‚úÖ Steerhead Alternative Energy Fund selected successfully!');
    
    // Wait for data to update after selection
    console.log('‚è≥ Waiting for data to update after fund selection...');
    await page.waitForLoadState('networkidle', { timeout: 10000 });
    await page.waitForTimeout(3000);
    
    // Verify View Report button is visible and enabled
    console.log('üîç Verifying View Report button...');
    await trialBalancePage.verifyViewReportButton();
    
    // Click View Report button
    console.log('üñ±Ô∏è Clicking View Report button...');
    await trialBalancePage.clickViewReport();
    
    // Smart wait: Wait for Export button to appear (5 minutes max) - Export button only appears when report is fully loaded
    console.log('‚è≥ Smart wait: Waiting for Export button to appear (up to 5 minutes)...');
    try {
      const exportButton = page.locator("//button[normalize-space()='Export']");
      await exportButton.waitFor({ state: 'visible', timeout: 300000 }); // 5 minutes
      console.log('‚úÖ Export button appeared - report is fully loaded!');
    } catch (error) {
      console.log('‚ùå Export button did not appear within 5 minutes - test will fail');
      throw new Error('Export button did not appear within 5 minutes - report not loaded');
    }
    
    // Pause for 5 seconds after export button appears
    console.log('‚è∏Ô∏è Pausing 5 seconds after report loaded...');
    await page.waitForTimeout(5000);
    
    // Click Export button
    console.log('üñ±Ô∏è Clicking Export button...');
    const exportButton = page.locator("//button[normalize-space()='Export']");
    await exportButton.click();
    
    // Wait for 5 seconds after clicking Export button
    console.log('‚è∏Ô∏è Waiting 5 seconds after clicking Export button...');
    await page.waitForTimeout(5000);
    
    // Wait for report data to actually appear (not just empty containers)
    console.log('üîç Waiting for report data to appear...');
    const reportData = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr, [class*="row"]:not(:empty)').first();
    await reportData.waitFor({ state: 'visible', timeout: 20000 });
    
    // Verify report data is actually present
    console.log('üîç Verifying report data is loaded...');
    const reportDataRows = page.locator('table tbody tr, .mx-datagrid tbody tr, .mx-listview tbody tr');
    const reportRowCount = await reportDataRows.count();
    console.log(`üìä Found ${reportRowCount} data rows in the report`);
    
    if (reportRowCount === 0) {
      throw new Error('No data rows found in the report after clicking View Report');
    }
    
    console.log('‚úÖ Report data fully loaded and displayed!');
    
    // Take screenshot for documentation
    console.log('üì∏ Taking screenshot...');
    await trialBalancePage.takeScreenshot('trial-balance-view-report-999.png');
    
    console.log('‚úÖ Test 999: Trial Balance with View Report functionality completed successfully!');
  });
});


